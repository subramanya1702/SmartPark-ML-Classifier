# -*- coding: utf-8 -*-
"""PLV_MODULE1_PIPELEINE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vHs5S8M8Siu6Vdqa2T74fzWEpjaL8ZN7
"""
import uuid

"""YOUTUBE STREAM IMAGE FETCHER"""

import configparser
import os
import pathlib
import subprocess
import time

import boto3

from my_utils.image_fetcher import image_fetcher
from my_utils.preprocess3 import pre_process


def process2_pipeline(MODEL, PREPROCESSING_CONFIG, object_name):
    # IMAGE FETCHER SCRIPT
    url = "https://www.youtube.com/watch?v=e9LYewJGQlk"

    fetched_image, filename_string, timestamp = image_fetcher(url)

    # Setting the path for saving the fetched and preprocessed images.
    preprocess_image_dir_path = PREPROCESSING_CONFIG["preprocessed-image-dir-save-path"]

    # Sending the image to preprocessing script 
    pre_processed_image = pre_process(fetched_image, preprocess_image_dir_path, filename_string)

    # Setting the directory path to fetch the image for detection 
    source = PREPROCESSING_CONFIG["preprocessed-image-dir-save-path"] + filename_string

    # PREDICTION part of the process pipeline
    command = [
        'python3',
        'detect.py',
        '--weights',
        MODEL["weights"],
        '--source',
        source,
        '--img-size',
        MODEL["img-size"],
        '--conf-thres',
        '0.68'
    ]

    # Running the detection script
    sp = subprocess.Popen(command, stdout=subprocess.PIPE)
    output, _ = sp.communicate()

    # POST-PROCESSING Script
    print(output)
    result_string = (output.split(b'\n'))[-4]
    print(result_string)
    try:
        number_of_vehicles = int(result_string.split(b" ")[1])
        number_of_empty_parking_slots = 41 - number_of_vehicles
    except:
        number_of_vehicles = 0
        number_of_empty_parking_slots = 41

    # #S3 BUCKET UPLOADING CODE
    object_name = object_name + filename_string
    file_name = os.path.join(pathlib.Path(__file__).parent.resolve(), f"inference/output/{filename_string}")
    response = s3.upload_file(file_name, bucket_name, object_name)
    print(response)

    http_url = "https://%s.s3.amazonaws.com/%s" % (bucket_name, object_name)
    print(http_url)

    str_timestamp = str(int(timestamp))
    parking_lot_table = dynamodb.Table('ParkingLotLog')
    parking_lot_table.put_item(
        Item={
            'id': str(uuid.uuid4()),
            'latlon': '34.887060:-92.393710',
            'parking_lot_name': 'Tebeau Hall',
            'empty_parking_spaces': str(number_of_empty_parking_slots),
            'total_parking_spaces': '41',
            'timestamp': str_timestamp,
            'ttl': int(timestamp),
            'image_url': http_url,
            'parking_lot_time_limit': "2 Hr Parking [ 8.30 am to 5.30 am]",
            'parking_charges': 'Pay at Pay Station [ 2$ per Hr ]'
        }
    )

    last_added_parking_lot_table = dynamodb.Table('LastAddedParkingLot')
    last_added_parking_lot_table.put_item(
        Item={
            'latlon': '34.887060:-92.393710',
            'timestamp': str_timestamp
        }
    )

    print("record inserted in dynamodb")


if __name__ == "__main__":
    # Read config.ini file
    config_obj = configparser.ConfigParser()
    config_obj.read("config/config.ini")
    MODEL = config_obj["MODEL_INPUTS"]
    AWS_CREDENTIALS = config_obj["AWS_CREDS"]
    AWS_ENV = config_obj["AWS_ENV"]
    PREPROCESSING_CONFIG = config_obj["PRE_PROCESSING_BOUNDS"]
    ACCESS_KEY = AWS_CREDENTIALS["access_key"]
    SECRET_KEY = AWS_CREDENTIALS["secret_key"]

    bucket_name = AWS_ENV["s3_bucket_name"]
    object_name = AWS_ENV["s3_object_name"]

    s3 = boto3.client("s3", aws_access_key_id=ACCESS_KEY, aws_secret_access_key=SECRET_KEY)
    dynamodb = boto3.resource("dynamodb", aws_access_key_id=ACCESS_KEY, aws_secret_access_key=SECRET_KEY,
                              region_name="us-east-1")

    n = 0
    while True:
        print(f"iteration {n}")
        start = time.time()

        process2_pipeline(MODEL, PREPROCESSING_CONFIG, object_name)

        end = time.time()
        diff = end - start
        print(diff)
        time.sleep(3)
        n += 1
